# PHP CircleCI 2.0 configuration file
# See: https://circleci.com/docs/2.0/language-php/
version: 2.1

orbs:
  # The Node.js orb contains a set of prepackaged CircleCI configuration you can utilize
  # Orbs reduce the amount of configuration required for common tasks.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
  node: circleci/node@5.0.0

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    # Specify the execution environment. You can specify an image from Dockerhub or use one of our Convenience Images from CircleCI's Developer Hub.
    # See: https://circleci.com/docs/2.0/configuration-reference/#docker-machine-macos-windows-executor
    docker:
      # Specify the version you desire here
      - image: circleci/php:7.4-node-browsers
      - image: cimg/node:14.17.6

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # Using the RAM variation mitigates I/O contention
      # for database intensive operations.
      # - image: circleci/mysql:5.7-ram
      #
      # - image: redis:2.8.19

    # Add steps to the job
    # See: https://circleci.com/docs/2.0/configuration-reference/#steps
    steps:
      - checkout

      - node/install-yarn

      - run:
          name: "Prepare Environment"
          command: |
            sudo apt update
            sudo docker-php-ext-install zip
      
      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: "Install Dependencies"
          command: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      - run:
          name: Show Node version
          command: |
            node --version
            yarn --version
      - node/install-packages:
          pkg-manager: yarn
      - run:
          name: Compilar produção
          command: yarn run prod

  migrate-test:
    
    docker:

      - image: circleci/php:7.4-node-browsers
      - image: cimg/node:14.17.6

    steps:
      - checkout

      - node/install-yarn

      - run:
          name: "Prepare Environment"
          command: |
            sudo apt update
            sudo docker-php-ext-install zip
      - run:
          name: Install PHP extensions
          command: |
            sudo docker-php-ext-install pdo_mysql
            sudo docker-php-ext-enable pdo_mysql

      # prepare the database
      - run: 
          name: Migrate Teste
          command: php artisan migrate --env=testing
      - run: 
          name: Seeding Teste
          command: php artisan migrate:refresh --seed

      - run:
          name: Git FTP 
          command: |
            sudo apt-get update 
            sudo apt-get -qq install git-ftp
      - deploy:
          name: Deploy to host if branch is branch
          command: |
            echo "Branches"
            echo "Initiating Push site: ${FTP_server_test}"
            git ftp push -u "${FTP_username_test}" -p "${FTP_password_test}" ftp://${FTP_server_test}/

  migrate-prod:
    
    docker:

      - image: circleci/php:7.4-node-browsers
      - image: cimg/node:14.17.6

    steps:
      - checkout

      - node/install-yarn

      - run:
          name: "Prepare Environment"
          command: |
            sudo apt update
            sudo docker-php-ext-install zip
      - run:
          name: Install PHP extensions
          command: |
            sudo docker-php-ext-install pdo_mysql
            sudo docker-php-ext-enable pdo_mysql

      - restore_cache:
          keys:
            # "composer.lock" can be used if it is committed to the repo
            - v1-dependencies-{{ checksum "composer.json" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run:
          name: "Install Dependencies"
          command: composer install -n --prefer-dist

      - save_cache:
          key: v1-dependencies-{{ checksum "composer.json" }}
          paths:
            - ./vendor

      # prepare the database
      - run: 
          name: Migrate Prod
          command: php artisan migrate --env=production --force
      - run: 
          name: Seeding Prod
          command: php artisan db:seed --force
      
      - run:
          name: Git FTP 
          command: |
            sudo apt-get update 
            sudo apt-get -qq install git-ftp
      - deploy:
          name: Deploy to host if branch is branch
          command: |
            echo "Branches"
            echo "Initiating Push site: ${FTP_server}"
            git config git-ftp.url ftp://${FTP_server}
            git config git-ftp.user ${FTP_username}
            git config git-ftp.password "${FTP_password}"
            git ftp init
            git ftp push -vv
      
            

workflows:
  version: 2
  build-deploy:
    jobs: 
      - build
      - migrate-test:
          filters:
            branches:
              only: /branche-.*/
              ignore: main
            tags:
              ignore: /.*/
      - migrate-prod:
          filters:
            branches:
              only: main
            tags:
              ignore: /.*/